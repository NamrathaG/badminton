<!DOCTYPE html>
<html>
<style>
    /* #myContainer {
  width: 400px;
  height: 400px;
  position: relative;
  background: #00AA85;
} */
    /* #shuttle {
  width: 100px;
  height: 100px;
  position: absolute;
} */
    label {
        display: block;
        width: 100px;
    }


    body {
        background-color: white;
    }
</style>

<body>

    <p>
        <button onclick="myMove()">Click Me</button>
        <button onclick="stop_func()">Stop Me</button>
        <button onclick="start_select()">Select Points</button>
        <button onclick="stop_select()">Finish Select</button>
        <label id="count">Counting...</label>
    </p>

    <table>

        <canvas id="canvas"></canvas>
        <img id="shuttle" style="width:2px;height:2px;" src="shuttle.png">
    </table>

    <script>
        var stop_func;
        var count = 0;
        var times = 10;
        var clicks = 0;
        var randomcount;
        var canvas = document.getElementById("canvas"),
            ctx = canvas.getContext("2d");

        canvas.width = 1520;
        canvas.height = 657;


        var background = new Image();
        background.src = "frontcourt.PNG";

        var shuttle = document.getElementById("shuttle")

        background.onload = function () {
            ctx.drawImage(background, 0, 0, background.width, background.height, 0, 0, canvas.width, canvas.height);
        }

        var xarray = []
        var yarray = []
        function getCursorPosition(canvas, event) {
            const rect = canvas.getBoundingClientRect()
            const x = event.clientX - rect.left
            const y = event.clientY - rect.top
            console.log("x: " + x + " y: " + y)
            xarray.push(x)
            yarray.push(y)
            clicks++
            ctx.drawImage(shuttle, x, y);
            console.log(xarray.toString())
            console.log(yarray.toString())
        }


        canvas.addEventListener('mousedown', function (e) {
            getCursorPosition(canvas, e)
        })

        function myMove() {

            //   var elem = document.getElementById("shuttle");   
            var label = document.getElementById("count");
            var id = setInterval(frame, 4000);
            async function frame() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.drawImage(background, 0, 0, background.width, background.height, 0, 0, canvas.width, canvas.height);
                await sleep(1000);
                label.innerHTML = count;
                if (count == times) {
                    alert("Wohoo"); clearInterval(id);
                }

                // var px=0;
                // var py = 0;
                // var r = getRandomInt(1,4);
                // console.log(r);
                // if(r == 1) {px =0; py = 0;}
                // //else if(r== 2) {px = 200-25; py = 0;}
                // else if(r==2) { px = 400-50;py =0;}
                // else if(r==3){px = 0 ; py = 400-50;}
                // //else if(r==5){ px = 200-25 ; py = 400-50;}
                // else if(r==4){ px = 400-50 ; py = 400-50 ; }
                // //else if(r==7){ px =0 ; py = 200-25 ; }
                // //else if(r==8){ px = 400-50 ; py = 200-25 ; }
                //   elem.style.top = py + 'px'; 
                //   elem.style.left = px + 'px';
                randomcount = getRandomInt(0, clicks - 1)
                ctx.drawImage(shuttle, xarray[randomcount], yarray[randomcount]);

                //ctx.drawImage(shuttle, xarray[count], yarray[count]);
                count++;
            }
            stop_func = function stop() {
                clearInterval(id);

            }
        }



        /**
         * Returns a random number between min (inclusive) and max (exclusive)
         */
        function getRandomArbitrary(min, max) {
            return Math.random() * (max - min) + min;
        }

        /**
         * Returns a random integer between min (inclusive) and max (inclusive)
         * Using Math.round() will give you a non-uniform distribution!
         */
        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }

        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
    </script>

</body>

</html>